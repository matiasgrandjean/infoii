#include <stdio.h>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>

void configureSerialPort(int fd) {
    struct termios serial;

    // Configuración de la estructura termios
    tcgetattr(fd, &serial);
    cfsetispeed(&serial, B9600);
    cfsetospeed(&serial, B9600);
    serial.c_cflag |= (CLOCAL | CREAD);
    serial.c_cflag &= ~PARENB;
    serial.c_cflag &= ~CSTOPB;
    serial.c_cflag &= ~CSIZE;
    serial.c_cflag |= CS8;
    serial.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
    serial.c_iflag &= ~(IXON | IXOFF | IXANY);
    serial.c_oflag &= ~OPOST;
    tcsetattr(fd, TCSANOW, &serial);
}

int main() {
    int fd;
    char buffer[10];

    // Abre el puerto serie
    fd = open("/dev/ttyUSB0", O_RDWR | O_NOCTTY);
    if (fd == -1) {
        perror("Error al abrir el puerto serie");
        return 1;
    }

    // Configura el puerto serie
    configureSerialPort(fd);

    while (1) {
        printf("Ingrese 1 para cargar un entero (1-5) o 2 para cargar y enviar: ");
        char option;
        scanf(" %c", &option);

        if (option == '1' || option == '2') {
            printf("Ingrese un entero (1-5): ");
            int value;
            scanf("%d", &value);

            if (value >= 1 && value <= 5) {
                if (option == '2') {
                    // Envía el entero al Arduino
                    dprintf(fd, "%d", value);
                    printf("Entero enviado: %d\n", value);
                }
            } else {
                printf("El entero debe estar entre 1 y 5.\n");
            }
        } else {
            printf("Opción no válida.\n");
        }
    }

    // Cierra el puerto serie
    close(fd);

    return 0;
}
